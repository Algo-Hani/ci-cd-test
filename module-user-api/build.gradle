// 1. Import 추가

import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

plugins {
    id 'com.epages.restdocs-api-spec' version '0.19.2' // REST Docs 플러그인 추가
    id 'org.hidetake.swagger.generator' version '2.18.2' // SwaggerUI 플러그인 추가
}

bootJar.enabled = true
jar.enabled = false

dependencies {
    // module-common 모듈을 의존성으로 추가
    implementation project(":module-common")

    // Spring Boot Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // Spring Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail:3.3.4'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // MariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // test
    testImplementation 'org.springframework.security:spring-security-test'

    // REST Docs
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
    swaggerUI 'org.webjars:swagger-ui'
}

test {
    useJUnitPlatform() // JUnit 5 사용
    systemProperty "jasypt.encryptor.password", System.getProperty("jasypt.encryptor.password") // Jasypt 암호화 설정
}

// 생성된 API 스펙이 어느 위치에 있는지 지정
swaggerSources {
    sample {
        setInputFile(file('${project.buildDir}/api-spec/openapi3.yaml'))
        if (file('${project.buildDir}/api-spec/openapi3.yaml').exists()) {
            println("Swagger Sources@@@@@@@@: ${project.buildDir}/api-spec/openapi3.yaml")
        } else {
            println("Swagger Sources########: ${project.buildDir}/api-spec/openapi3.yaml")
        }
        println("Swagger Sources: ${project.buildDir}/api-spec/openapi3.yaml")
    }
}

// openapi3 스펙 생성 시 설정 정보
openapi3 {
    println("openapi3")
    servers = [
            { url = 'http://localhost:8080' },
            { url = 'https://api.user.algopuni.site' }
    ]
    title = "Algopuni User API"
    description = "Algopuni 사용자 API"
    version = "1.0.0"
    format = "yaml"
    outputDirectory = 'build/resources/main/static/docs'
    println("buildDir: ${buildDir}")
}

// SwaggerUI 생성 시 설정 정보
tasks.withType(GenerateSwaggerUI).configureEach {
    println("Generate Swagger UI")
    dependsOn 'openapi3'
    def swaggerUIFile1 = file("${openapi3.outputDirectory}/openapi3.yaml")
    println("Swagger UI File11111111: ${swaggerUIFile1.absolutePath}")
    if (swaggerUIFile1.exists()) {
        println("Swagger UI File22222222: ${swaggerUIFile1.absolutePath}")
    } else {
        println("Swagger UI File33333333: ${swaggerUIFile1.absolutePath}")
    }

    def testFile = fileTree(dir: "${rootDir}/", include: '**/openapi3.yaml')
    testFile.each { file ->
        println("File!!!!!: ${file}")
    }
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")
        println("Swagger UI File: ${swaggerUIFile.absolutePath}")
        def securitySchemesContent = "  securitySchemes:\n" +                                                \
                                                                                    "    APIKey:\n" +                                                \
                                                                                    "      type: apiKey\n" +                                                \
                                                                                    "      name: Authorization\n" +                                                \
                                                                                    "      in: header\n" +                                               \
                                                                                    "security:\n" +
                "  - APIKey: []  # Apply the security scheme here"

        swaggerUIFile.append securitySchemesContent
    }
}

bootJar {
    // bootJar 작업 실행 전 generateSwaggerUISample 작업 실행
    dependsOn generateSwaggerUISample
    from("${generateSwaggerUISample.outputDir}") {
        println("Swagger UI: ${generateSwaggerUISample.outputDir}")
        into "static/docs"
    }
}
